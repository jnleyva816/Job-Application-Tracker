name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write
  statuses: write
  actions: read
  security-events: write

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '20'
  MAVEN_OPTS: '-Xmx3072m'

jobs:
  # Backend CI Jobs
  backend-build:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven
      
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Run tests
        run: ./mvnw test
      
      - name: Generate test report
        uses: dorny/test-reporter@v1.9.1
        if: success() || failure()
        with:
          name: Backend Test Results
          path: backend/target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: false
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build application
        run: ./mvnw clean compile
      
      - name: Package application
        run: ./mvnw package -DskipTests
      
      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: backend/target/*.jar
          retention-days: 7

  backend-code-quality:
    name: Backend Code Quality & Security
    runs-on: ubuntu-latest
    needs: backend-build
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven
      
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Run SonarCloud analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [ -n "$SONAR_TOKEN" ]; then
            ./mvnw sonar:sonar \
              -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }}-backend \
              -Dsonar.organization=${{ github.repository_owner }} \
              -Dsonar.host.url=https://sonarcloud.io
          else
            echo "SONAR_TOKEN not set, skipping SonarCloud analysis"
          fi
      
      - name: OWASP Dependency Check
        run: |
          ./mvnw org.owasp:dependency-check-maven:check \
            -DfailBuildOnCVSS=7 \
            -DsuppressedPatternsFilename=owasp-suppressions.xml || true
      
      - name: Upload OWASP report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-report
          path: backend/target/dependency-check-report.html
          retention-days: 7

  # Frontend CI Jobs
  frontend-build:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Run type checking
        run: npx tsc --noEmit
      
      - name: Run unit tests
        run: npm run test:coverage
        env:
          VITE_API_URL: http://localhost:8080/api
          CI: true
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Build application
        run: npm run build
      
      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/
          retention-days: 7

  frontend-e2e:
    name: Frontend E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven
      
      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: backend/target/
      
      - name: Find available ports
        run: |
          # Function to find available port
          find_free_port() {
            local start_port=$1
            local port=$start_port
            while [ $port -lt $((start_port + 100)) ]; do
              if ! netstat -tuln | grep -q ":$port "; then
                echo $port
                return
              fi
              port=$((port + 1))
            done
            echo "No free port found starting from $start_port" >&2
            exit 1
          }
          
          # Find free ports
          BACKEND_PORT=$(find_free_port 8080)
          FRONTEND_PORT=$(find_free_port 4173)
          
          echo "BACKEND_PORT=$BACKEND_PORT" >> $GITHUB_ENV
          echo "FRONTEND_PORT=$FRONTEND_PORT" >> $GITHUB_ENV
          echo "Using backend port: $BACKEND_PORT"
          echo "Using frontend port: $FRONTEND_PORT"
      
      - name: Start backend service
        run: |
          cd backend
          # Kill any existing processes on our target port
          sudo lsof -ti:$BACKEND_PORT | xargs sudo kill -9 2>/dev/null || true
          
          # Wait a moment for port to be released
          sleep 2
          
          echo "Starting backend with configuration:"
          echo "  Port: $BACKEND_PORT"
          echo "  Profile: test"
          echo "  Database: H2 in-memory"
          
          # Start backend with dynamic port and explicit configuration
          java -jar target/*.jar \
            --server.port=$BACKEND_PORT \
            --spring.profiles.active=test \
            --spring.datasource.url=jdbc:h2:mem:testdb \
            --spring.datasource.driver-class-name=org.h2.Driver \
            --spring.jpa.hibernate.ddl-auto=create-drop \
            --logging.level.com.jnleyva.jobtracker_backend=INFO \
            --management.endpoints.web.exposure.include=health,info \
            --management.endpoint.health.show-details=always > backend.log 2>&1 &
          
          echo $! > backend.pid
          echo "Backend started with PID: $(cat backend.pid) on port: $BACKEND_PORT"
          
          # Give the backend a moment to start up
          sleep 5
          echo "Backend startup initiated, checking process status..."
          if kill -0 $(cat backend.pid) 2>/dev/null; then
            echo "✅ Backend process is running"
          else
            echo "❌ Backend process failed to start"
            echo "📄 Backend log:"
            cat backend.log || true
            exit 1
          fi
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Build frontend with dynamic API URL
        run: |
          cd frontend
          VITE_API_URL=http://localhost:$BACKEND_PORT/api npm run build
      
      - name: Start frontend service
        run: |
          cd frontend
          # Kill any existing processes on our target port
          sudo lsof -ti:$FRONTEND_PORT | xargs sudo kill -9 2>/dev/null || true
          
          # Start frontend with dynamic port
          npm run preview -- --port $FRONTEND_PORT --host 0.0.0.0 > frontend.log 2>&1 &
          echo $! > frontend.pid
          echo "Frontend started with PID: $(cat frontend.pid) on port: $FRONTEND_PORT"
      
      - name: Wait for services to be ready
        run: |
          # Wait for backend health check
          echo "Waiting for backend on port $BACKEND_PORT..."
          
          timeout 120 bash -c "
            until curl -f -s http://localhost:$BACKEND_PORT/actuator/health >/dev/null 2>&1 || curl -f -s http://localhost:$BACKEND_PORT/health >/dev/null 2>&1 || curl -f -s http://localhost:$BACKEND_PORT/test >/dev/null 2>&1; do 
              echo 'Backend not ready, waiting...'
              if [ -f backend/backend.pid ] && ! kill -0 \$(cat backend/backend.pid) 2>/dev/null; then
                echo 'Backend process died, showing logs:'
                cat backend/backend.log || true
                exit 1
              fi
              sleep 3
            done
          " || {
            echo "❌ Backend health check timed out after 120 seconds"
            echo "📋 Backend process status:"
            if [ -f backend/backend.pid ]; then
              BACKEND_PID=$(cat backend/backend.pid)
              if kill -0 $BACKEND_PID 2>/dev/null; then
                echo "Backend process (PID: $BACKEND_PID) is still running"
                echo "📊 Port $BACKEND_PORT status:"
                netstat -tuln | grep ":$BACKEND_PORT " || echo "Port $BACKEND_PORT not listening"
                echo "🔍 Testing health endpoints:"
                echo "  Actuator health:"
                curl -v -m 10 http://localhost:$BACKEND_PORT/actuator/health || true
                echo "  Custom health:"
                curl -v -m 10 http://localhost:$BACKEND_PORT/health || true
                echo "  Test endpoint:"
                curl -v -m 10 http://localhost:$BACKEND_PORT/test || true
                echo "📄 Last 50 lines of backend log:"
                tail -n 50 backend/backend.log || true
              else
                echo "Backend process (PID: $BACKEND_PID) has died"
                echo "📄 Backend log:"
                cat backend/backend.log || true
              fi
            else
              echo "No backend PID file found"
            fi
            exit 1
          }
          echo "✅ Backend is ready on port $BACKEND_PORT"
          
          # Wait for frontend
          echo "Waiting for frontend on port $FRONTEND_PORT..."
          timeout 60 bash -c "
            until curl -f http://localhost:$FRONTEND_PORT >/dev/null 2>&1; do 
              echo 'Frontend not ready, waiting...'
              if [ -f frontend/frontend.pid ] && ! kill -0 \$(cat frontend/frontend.pid) 2>/dev/null; then
                echo 'Frontend process died, showing logs:'
                cat frontend/frontend.log || true
                exit 1
              fi
              sleep 2
            done
          "
          echo "✅ Frontend is ready on port $FRONTEND_PORT"
          
          # Verify services are responding
          echo "🔍 Backend health verification:"
          echo "  Testing actuator health endpoint:"
          curl -s http://localhost:$BACKEND_PORT/actuator/health | jq '.' || curl -s http://localhost:$BACKEND_PORT/actuator/health | head -n 10
          echo -e "\n  Testing custom health endpoint:"
          curl -s http://localhost:$BACKEND_PORT/health | jq '.' || curl -s http://localhost:$BACKEND_PORT/health | head -n 5
          echo -e "\n  Testing basic connectivity:"
          curl -s http://localhost:$BACKEND_PORT/test | head -n 3
          echo -e "\n🔍 Frontend response:"
          curl -s http://localhost:$FRONTEND_PORT | head -n 5
      
      - name: Install Playwright
        run: |
          cd frontend
          npx playwright install --with-deps
      
      - name: Run E2E tests
        run: |
          cd frontend
          # Set the base URL for Playwright using the dynamic port
          export PLAYWRIGHT_BASE_URL=http://localhost:$FRONTEND_PORT
          export VITE_API_URL=http://localhost:$BACKEND_PORT/api
          
          echo "Running E2E tests with:"
          echo "  Frontend URL: $PLAYWRIGHT_BASE_URL"
          echo "  Backend API URL: $VITE_API_URL"
          
          # Run tests and capture exit code
          npx playwright test --reporter=html,junit,json || TEST_EXIT_CODE=$?
          
          # Show test results summary
          if [ -f test-results/junit.xml ]; then
            echo "📊 Test Results Summary:"
            grep -o 'tests="[^"]*"' test-results/junit.xml || true
            grep -o 'failures="[^"]*"' test-results/junit.xml || true
            grep -o 'errors="[^"]*"' test-results/junit.xml || true
          fi
          
          # Exit with test result code
          exit ${TEST_EXIT_CODE:-0}
      
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: frontend/test-results/
          retention-days: 7
      
      - name: Stop services
        if: always()
        run: |
          echo "🧹 Cleaning up services..."
          
          # Stop frontend service
          if [ -f frontend/frontend.pid ]; then
            FRONTEND_PID=$(cat frontend/frontend.pid)
            if kill -0 $FRONTEND_PID 2>/dev/null; then
              echo "Stopping frontend service (PID: $FRONTEND_PID)"
              kill $FRONTEND_PID || true
              sleep 2
              kill -9 $FRONTEND_PID 2>/dev/null || true
            fi
            rm -f frontend/frontend.pid
          fi
          
          # Stop backend service
          if [ -f backend/backend.pid ]; then
            BACKEND_PID=$(cat backend/backend.pid)
            if kill -0 $BACKEND_PID 2>/dev/null; then
              echo "Stopping backend service (PID: $BACKEND_PID)"
              kill $BACKEND_PID || true
              sleep 2
              kill -9 $BACKEND_PID 2>/dev/null || true
            fi
            rm -f backend/backend.pid
          fi
          
          # Kill any remaining processes on our ports
          [ ! -z "$BACKEND_PORT" ] && sudo lsof -ti:$BACKEND_PORT | xargs sudo kill -9 2>/dev/null || true
          [ ! -z "$FRONTEND_PORT" ] && sudo lsof -ti:$FRONTEND_PORT | xargs sudo kill -9 2>/dev/null || true
          
          echo "✅ Service cleanup completed"
      
      - name: Upload service logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: service-logs
          path: |
            backend/backend.log
            frontend/frontend.log
          retention-days: 7

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Docker Build and Push
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-code-quality, frontend-build, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true
      
      - name: Configure AWS credentials for ECR
        if: github.event_name != 'pull_request'
        continue-on-error: true
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}
      
      - name: Log in to Amazon ECR
        if: github.event_name != 'pull_request'
        continue-on-error: true
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION || 'us-east-1' }}.amazonaws.com
      
      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: backend/target/
      
      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/
      
      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/job-tracker-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/job-tracker-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deployment Jobs
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        continue-on-error: true
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Deploy to AWS ECS (Staging)
        continue-on-error: true
        run: |
          if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "🚀 Deploying to AWS ECS Staging..."
            aws ecs update-service \
              --cluster job-tracker-staging-cluster \
              --service job-tracker-backend-staging \
              --force-new-deployment || echo "ECS service not found, skipping"
            
            aws ecs update-service \
              --cluster job-tracker-staging-cluster \
              --service job-tracker-frontend-staging \
              --force-new-deployment || echo "ECS service not found, skipping"
          else
            echo "⚠️ AWS credentials not configured, skipping cloud deployment"
          fi
      
      - name: Staging deployment notification
        run: |
          echo "✅ Staging deployment completed successfully!"
          echo "📦 Images pushed to Docker Hub"
          echo "🏗️ Environment: Staging"
          echo "🔗 Monitor at: https://github.com/${{ github.repository }}/actions"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        continue-on-error: true
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Deploy to AWS ECS (Production)
        continue-on-error: true
        run: |
          if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "🚀 Deploying to AWS ECS Production..."
            aws ecs update-service \
              --cluster job-tracker-production-cluster \
              --service job-tracker-backend-production \
              --force-new-deployment || echo "ECS service not found, skipping"
            
            aws ecs update-service \
              --cluster job-tracker-production-cluster \
              --service job-tracker-frontend-production \
              --force-new-deployment || echo "ECS service not found, skipping"
          else
            echo "⚠️ AWS credentials not configured, skipping cloud deployment"
          fi
      
      - name: Create deployment tag
        continue-on-error: true
        run: |
          if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git tag -a "v$(date +'%Y.%m.%d')-${GITHUB_SHA:0:7}" -m "Production deployment $(date +'%Y-%m-%d %H:%M:%S')"
            git push origin --tags
          else
            echo "⚠️ Skipping deployment tagging (AWS not configured)"
          fi
      
      - name: Production deployment notification
        run: |
          echo "✅ Production deployment completed successfully!"
          echo "📦 Images pushed to Docker Hub"
          echo "🏗️ Environment: Production"
          echo "🔗 Monitor at: https://github.com/${{ github.repository }}/actions"

  # Notification
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result != 'skipped' || needs.deploy-production.result != 'skipped')
    
    steps:
      - name: Send notification
        continue-on-error: true
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 